//13.1 클라이언트 측 자바스크립트
/*
13.1.1 웹 브라우저에서 자바스크립트가 하는 일 
자바스크립트를 사용하지 않는 웹 페이지는 정적 웹페이지라고 함
자바스크립트를 사용하면 동적 웹 페이지를 만들 수 있다. 
기술적인 측면에서 자바스크립트가 웹 브라우저에서 하는 일은 
1. 웹 페이지의  Document 객체 제어(html 요소와 css 스타일)
2. window 객체 및 브라우저 제어
3. 웹 페이지에서 발생하는 이벤트 처리 
4. http를 이용한 통신 제어 

- 웹 어플리케이션 
:파일 읽기쓰기, 드래그앤 드롭, 멀티스레딩등등

- 빨라진 자바스크립트 
: JIT 컴파일러를 도입하면서 빠른 실행속도를 갖춤 

13.1.2 자바스크립트 코드를 삽입하는 방법 
1. script 요소의 내용물로 작성(인라인 스크립트)
<script> console.log("hello") </script>
2. 외부의 파일을 읽어 들이기
<script src="../script/test.js"></script>
3. 이벤트 처리기 속성에 작성하기
<input type="button" value="click" onclick="console.log("hello");">
4. javaScript URL
<a href="javascript:console.log("hello");">hello</a>


13.1.3 웹 브라우저에서 자바 스크립트 실행 순서 
웹 브라우저에서 html 문서를 분석하고 표시하는 프로그램을 가리켜 렌더링 엔진이라고 한다. 
렌더링 엔진은 다음과 같은 과정을 거쳐 html 문서의 구문을 분석하고 DOM트리를 구축한 후에 html 안에 지정된 자바스크립트 코드를 실행함
1. 웹 브라우저로 웹 페이지를 열면 window객체가 가장 먼저 생성된다  
2. Document  객체가 window 객체의 프로퍼티로 생성되고 웹 페이지를 해석해서 DOM트리의 구축을 시도한다. 
document객체는 readyState 프로퍼티에 html 문서의 해석 상태를 뜻하는 문자열이 저장됨 (초기값 : loading)
3. html 문서는 html 구문을 작성 순서에 따라 분석하며 Document 객체 요소와 텍스트 노드를 추가함
4. html 문서 안에 script 요소가 있으면 그 안의 코드 또는 외부 파일에 저장된 구문을 분석함 
5. html 문서의 모든 내용을 읽고 DOM트리 구축을 완료하면 document.readyState 프로퍼티 값이 interactive가 됨 
6. Document 객체에 COM 트리 구축 완료를 알리기 위해 DOMContentLoaded 이벤트 발생
7. img 등의 요소가 이미지 파일 등의 외부 리소스를 읽어 들여야 한다면 이 시점에서 읽어들인다. 
8. 모든 리소스를 읽어 들인 후에는 document.readyState 프로퍼티 값이 complete가 됨 
웹 브라우저는 window 객체를 상대로 load 이벤트를 발생시킨다. 
9. 이후로는 다양한 이벤트를 수신하고 발생하면 비동기로 처리함 

//async와 defer
둘다 script 요소에는 사용 가능하나 인라인 스크립트에는 사용할 수 없다. 
<script async src="../script/test.js"></script>
<script defer src="../script/test.js"></script>

-async
script  요소의 코드가 비동기적으로 실행된다. html 문서의 구문 분석 처리를 막지 않고 최대한 빨리 실행시켜버린다. 
순서를 보장하지 않음
-defer 
DOM 구축이 끝난후 실행되기 때문에 요소 객체에 이벤트 처리기를 등록하는 등 초기화 작업이 가능하다 
DOMContenetLoaded 이벤트의 대안으로 활용할 수 있다. 

13.1.4 웹 브라우저의 호환성 

14.1.5 크로스 브라우징 대책
오래된 웹 브라우저에서도 문제 없이 웹 페이지를 표시하고 같은 기능은 사용할 수 있도록 대응하는 작업 
1 기능성 테스트 
모든 브라우저가 지원하지 않는 기능을 사용할 때 해당 기능을 지원하는 지 테스트 하는 것을 가리켜 기능성 테스트라고 한다. 
사용하려는 기능을 지원하지 않는 환경에서 다른 코드로 교체해 구현한다 
장점은 큰 특정 웹 브라우저 버전에 국한되지 않는 코드를 작성할 수 있다는 점

2 브라우저 테스트 
특정 웹 브라우저에만 국한된 버그에 대처할 때는 기증성 테스트를 사용할 수 없다. 
대처해야하는 웹 브라우저의 종류와 버전  OS등의 정보를 파악하고 대책을 마련하는데 Navigator객체로 파악할 수 있다. 
꼭 필요한 경우에만 하고 되도록 안하는게 좋다? 왜?

3 라이브러리를 사용해서 대응하기 
호환성 문제를 해결해주는 라이브러리를 사용하면 호환성 문제를 신경쓰지 않고 코드를 작성할 수 있다. 
호환성 문제를 해결하는 라이브러리가 jQuery

13.1.6 Window 객체 
클라이언트측에서 가장 중요한 객체는 Winoow이고 전역 객체이며 전역변수는 window 객체의 프로퍼티
window. 부분은 생략 가능 


*/
