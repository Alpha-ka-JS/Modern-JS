//8.5.1 실행 가능한 코드
/*
    전역코드 - Window 아래에 정의된 함수
    함수코드 - 함수
    eval코드 - eval 함수

    분류 이유 : 초기화하는 환경과 과정이 다름
    */

//8.5.2 실행 문맥의 구성
/*
실행문맥은 실행에 필요한 모든 정보를 컴포턴트가 여러개로 나누어 관리
    - 렉시컬 환경 컴포넌트 
    - 변수 환경 컴포넌트
    - 디스 바인딩 컴포넌트 - 호출한 객체의 참조 저장 (this)

//8.5.3 렉시컬 환경 컴포넌트의 구성
    /*
    "렉시컬 환경 컴포넌트" : 자바스크립트 코드 실행을 위해 자원을 모아둔 곳
    ex) 함수, 블록의 유효범위 안에 있는 식별자와 결과값

    렉시컬 환경 컴포넌트의 구성
        - 환경 레코드 : 유효 범위 안에 있는 식별자 기록, 실행
            ex) 함수 내부의 코드
        - 외부 렉시컬 환경 참조 : 중첩된 함수 안에서 외부의 변수를 읽거나 써야 할 때 렉시컬 환경을 올라가서 변수 검색
            ex) 함수 외부의 코드
    */

//8.5.4 환경 레코드의 구성
/*
    환경 레코드
        - 선언적 환경 레코드 : 실제로 함수, 변수, catch 문의 식별자와 실행결과 저장
            
        - 객체 환경 레코드 : 실행 문맥 외부에 별도로 저장된 객체의 참조에서 데이터 read, write 
            객체의 레퍼런스를 관리
    */

//8.5.5 전역 환경과 전역 객체의 생성
/*
    자바스크립트 인터프리터는 시작하면서 렉시컬 환경 타입의 전역환경 생성
    그리고 전역 객체를 생성 후 전역 환경의 객체 환경 레코드에다가 전역 객체의 참조 대입

*/

//8.5.6 프로그램의 평가와 전역 변수
/* 
    전역 환경과 전역 객체를 생성하면 자바스크립트 프로그램을 읽어들임
    최상위 var 및 함수는 전역 환경의 환경레코드(객체 환경 레코드)의 프로퍼티로 추가(함수의 경우 객체로 생성해서 추가)
    함수 안의 지역변수와 중첩함수의 참조는 환경 레코드(선언적 환경 레코드)의 프로퍼티 추가

    */

// var a = { x:1, y:2};
// console.log(window.a);
// function norm(x) {};
// console.log(window.norm);

//8.5.7 프로그램 실행과 실행 문맥
/*
    프로그램 평가 후 프로그램이 실행 되며 실행 문맥에서 실행된다
    실행문맥은 stack으로 관리되며 가장 먼저 전역코드를 실행한다. 그 이후 실행문맥을 stack에 넣어 실행된다.
    중첩 함수나 재귀의 경우에도 새롭게 stack에 넣는다
    */

//8.5.8 자바스크립트는 싱글 스레드
/* 
    호출 스택에 쌓인 실행 문맥을 queue 방식으로 실행한다
    비동기처리(이벤트처리)도 queue 방식으로 실행된다.
    웹 브라우저의 API인 Web Worker를 사용하면 백그라운드에 있는 다른 스레드에서 실행 가능 -> 멀티스레드 처리
    */

//8.5.9 환경 레코드와 지역변수
/*
    함수 호출 -> 현재 실행중인 코드 중지 -> 실행 문맥 생성 후 이동 -> 함수의 실행 문맥 호출에 스택에 push -> 실행문맥안에 렉시컬  환경 컴포넌트 생성
    */

//8.5.10 this 값
/*
    this는 함수가 호출 됐을 때, 함수가 속해 있는 객체의 참조
    */
var tom = {
  name: 'Tom',
  sayHello: function () {
    console.log('Hello! ' + this.name);
  },
};
tom.sayHello();

var huck = { name: 'Huck' };
huck.sayHello = tom.sayHello;
huck.sayHello();
// 함수는 객체에 묶여 있지 않다(객체가 함수를 참초함)
console.log(this);

function ff() {
  console.log(this);
}
var a = {};
a.f = ff;
a.f();

//8.5.11 식별자 결정 : 유효 범위 체인
/*
    식별자 결정 규칙 : 좀 더 안쪽에 있는 변수 사용
    */

var a = 'A';
function f() {
  var b = 'B';
  function g() {
    var c = 'C';
    console.log(a + b + c);
  }
  g();
}
f();
/*
    속박 변수 : 함수의 인수, 지역 변수 -> 닫힌 함수 : 속박 변수만 포함 되어 있는 함수
    자유 변수 : 속박 변수 외 변수      -> 열린 함수 : 자유 변수 포함
    */

//8.5.12 가비지 컬렉션
/*
    객체 생성시 메모리 공간이 동적할당 된다. 
    만약 사용하지 않는 객체 발생시 "가비지 컬렉터"가 메모리 영역을 해제

    <이전>
    참조 방식 : 참조하는 객체 수를 세어 0일 경우 해제
    (예외 : 순환 참조)
    ex) a.next = b , b.next = a -> 참조하는 객체가 1개 이상이 존재하여 메모리 해제 실패

    <현재>
    마크 앤 스윕 : 전역 객체가 참조할 수 없는 객체 검색하고 찾게 되면 메모리 해제
    */
